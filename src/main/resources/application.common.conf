include "project"
#
# Shared configuration
#

env-suffix = ""
site = ""

core-database {
  source = com.mysql.cj.jdbc.MysqlConnectionPoolDataSource
  name = cognifyx-core${env-suffix}
  host = ${CORE_MYSQL_HOST}
  port = ${CORE_MYSQL_PORT}
  username = ${app.name}
  password = ${CORE_MYSQL_PASSWORD}
}

dragon-database {
  source = com.mysql.cj.jdbc.MysqlConnectionPoolDataSource
  name = ${app.name}-db${env-suffix}
  host = ${MY_MYSQL_HOST}
  port = ${MY_MYSQL_PORT}
  username = ${app.name}
  password = ${MY_MYSQL_PASSWORD}
}

mq {
  broker {
    label = ${app.name}-${app.version}${env-suffix}
    host = ${RABBIT_MQ_HOST}
    port = 5671
    use-ssl = true
    username = ${app.name}
    password = ${RABBIT_MQ_PASSWORD}
  }

  consumer {
    label = queue-consumer
    is-enabled = true
    queue-name = corp-apollo-dragon-q${env-suffix}
    prefetch-count = 1
    is-requeued-to-original = false
    timeout = 12.seconds
  }

  self-publisher {
    label = dragon-publisher
    is-enabled = true
    exchange-name = corp-apollo-dragon-x${env-suffix}
    routing-key = ""
    is-mandatory = true
    must-wait-for-confirm = true
  }

  cygnus-publisher {
    label = cygnus-publisher
    is-enabled = true
    exchange-name = med-cygnus-x${env-suffix}
    routing-key = ""
    is-mandatory = true
    must-wait-for-confirm = true
  }

  email-publisher {
    label = email-publisher
    is-enabled = true
    exchange-name = common-email-x${env-suffix}
    routing-key = ""
    is-mandatory = true
    must-wait-for-confirm = true
  }

  topology {
    exchanges = [
      {
        name = corp-apollo-dragon-x${env-suffix}
        type = direct
        is-internal = false
        args {
        }
      }
    ]

    queues = [
      {
        name = corp-apollo-dragon-q${env-suffix}
        args {
          x-queue-type = classic
          x-dead-letter-exchange = corp-apollo-dragon-dlx${env-suffix}
        }
      }
    ]

    dlxs = [
      {
        name = corp-apollo-dragon-dlx${env-suffix}
        type = direct
        is-internal = true
        args {
        }
      }
    ]

    dlqs = [
      {
        name = corp-apollo-dragon-dlq${env-suffix}
        args {
          x-queue-type = classic
          x-dead-letter-exchange = corp-apollo-dragon-x${env-suffix}
          x-message-ttl = 3.minutes
        }
      }
    ]

    bindings = [
      {
        exchange-name = corp-apollo-dragon-x${env-suffix}
        queue-name = corp-apollo-dragon-q${env-suffix}
      },
      {
        exchange-name = corp-apollo-dragon-dlx${env-suffix}
        queue-name = corp-apollo-dragon-dlq${env-suffix}
      }
    ]
  }
}

dbfs {
  new-user-default-password = password
  days-till-expiry = 30
  magic-link-path = ${MAGIC_LINK_HOST}/magic-link
  otp-validity-in-minutes = 10
  otp-retries = 5
  report-s-3-public-path = ${REPORT_S3_PUBLIC_PATH}
}

customer {
  source = apollo
  nw-api-key = ${NW_API_KEY}
}

services {
  core {
    source = ${app.name}${env-suffix}
    destination = cx-cognifyx-core${env-suffix}
    address = "/$/inet/"${CX_COGNIFYX_SVC_HOST}"/443"
  }
  alerter {
    source = ${app.name}${env-suffix}
    destination = google-chat
    address = "/$/inet/chat.googleapis.com/443"
    args {
      space = "--ignore"
      key = "AIzaSyDdI0hCZtE6vySjMm-WEfRq3CPzqKqqsHI"
      token = "--ignore"
    }
  }
  customer {
    source = ${app.name}${env-suffix}
    destination = apollo-server
    address = "/$/inet/"${API_BASE_URL}"/"${API_PORT}
    username = ${API_AUTH_USERNAME}
    password = ${API_AUTH_PASSWORD}
    http-min-retry-delay = ${min_retry_delay},
    http-max-retry-delay = ${max_retry_delay},
    http-max-retries = ${max_retries}
  }
}

aws {
  region = ${S3_AWS_REGION}
  access-key = ${S3_AWS_ACCESS_KEY_ID}
  access-secret = ${S3_AWS_SECRET_ACCESS_KEY}
  storage {
    bucket = ${AWS_S3_BUCKET}
  }
}

app-timezone = ${APP_TIMEZONE}
